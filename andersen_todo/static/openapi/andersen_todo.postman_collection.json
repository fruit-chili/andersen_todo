{
	"info": {
		"_postman_id": "61c841e5-09ad-4f16-bb91-de2447831ad6",
		"name": "Andersen_todo",
		"description": "Simple RESTful application for managing a task list (ToDo list) based on Django (DRF) and PostreSQL. Made as Python technical task for Andersen.\n\nThere are three options for API testing available:\n\n1. \\[Swagger-ui\\]: [http://localhost/openapi](http://localhost/openapi)\n    \n2. \\[Postman collection\\]: [http://localhost/static/openapi/andersen_todo.postman_collection.json](http://localhost/static/openapi/andersen_todo.postman_collection.json)\n    \n3. \\[/andersen_todo/tasks/\\]run: 'python -m pytest tests.py' (requires python with pytest, requests)  \n    \n\n\\[GitHub\\]([https://github.com/fruit-chili/andersen_todo)](https://github.com/fruit-chili/andersen_todo)EndFragment)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29660216"
	},
	"item": [
		{
			"name": "User registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "first_name",
							"value": "Somename",
							"description": "required",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "Somelastname",
							"description": "optional",
							"type": "text"
						},
						{
							"key": "username",
							"value": "Newuser",
							"description": "required",
							"type": "text"
						},
						{
							"key": "password",
							"value": "yourpassword",
							"description": "required, min 6 symbols",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/registration/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"registration",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "User login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"var responseBody = pm.response.json();",
							"postman.setGlobalVariable('key', responseBody.access);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "Newuser",
							"type": "text"
						},
						{
							"key": "password",
							"value": "yourpassword",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "List of all tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/tasks/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						""
					],
					"query": [
						{
							"key": "status",
							"value": "New",
							"description": "Filtering tasks by status (possible values: New, In Progress, Completed)",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"description": "Pagination (possible values: 1, 2, 3...)",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create a new task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "Feed the cat",
							"description": "required, max 64 symbols",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Cat looks hungry, feed him as soon as possible.",
							"description": "optional, max 1024 symbols",
							"type": "text"
						},
						{
							"key": "status",
							"value": "New",
							"description": "optional (default = New). Predefined values: New, In Progress, Completed",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/tasks/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						""
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "List of all own tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/tasks/own/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"own",
						""
					],
					"query": [
						{
							"key": "status",
							"value": "New",
							"description": "Filtering tasks by status (possible values: New, In Progress, Completed)",
							"disabled": true
						},
						{
							"key": "page",
							"value": "2",
							"description": "Pagination (possible values: 1, 2, 3...)",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "List of all user's tasks (by user id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/tasks/users/1/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"users",
						"1",
						""
					],
					"query": [
						{
							"key": "status",
							"value": "New",
							"description": "Filtering tasks by status (possible values: New, In Progress, Completed)",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"description": "Pagination (possible values: 1, 2, 3...)",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Information about a specific task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/tasks/1/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"1",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update task information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "Some new title",
							"description": "max 64 symbols",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Updated description",
							"description": "max 1024 symbols",
							"type": "text"
						},
						{
							"key": "status",
							"value": "In Progress",
							"description": "Predefined values: New, In Progress, Completed",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/tasks/1/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"1",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Delete a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/tasks/1/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"1",
						""
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Marking a task as completed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "New title",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/tasks/1/mark-completed/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"1",
						"mark-completed",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Bearer {{key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost/"
		}
	]
}