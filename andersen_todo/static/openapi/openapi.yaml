openapi: 3.0.3
info:
  title: "ToDo list"
  description: |-
    ## Common info
    Simple RESTful application for managing a task list (ToDo list) based on Django (DRF)
    and PostreSQL. Made as Python technical task for Andersen.

    There are three options for API testing available:
    * [Swagger-ui](http://localhost/openapi)
    * [Postman collection](http://localhost/static/openapi/andersen_todo.postman_collection.json)<br>
    * run: 'pytest tests.py' (/andersen_todo/tasks/)

    [GitHub](https://github.com/fruit-chili/andersen_todo)

  contact:
    name: "Dzmitry Surmiankou"
    email: "d.surmiankou@gmail.com"
  version: '1.0.0'


servers:
  - url: http://localhost/
    description: local server


tags:
  - name: auth
    description: Registration/authentication system
  - name: tasks
    description: Everything about tasks


paths: 

  /registration/:
    post:
      tags:
        - auth
      summary: New user registration
      operationId: registration
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'          
      responses:
        201: 
          description: Successful operation
        400: 
          description: Bad request, see response text   

  /login/:
    post:
      tags:
        - auth
      summary: Login
      description: |-
        Check the credentials and return the JWT
        if the credentials are valid.<br>
        **[Swagger-ui]: Don't forget to Authorize.
        Copy 'access'-value from current requests's response and click 
        AUTHORIZE button (placed next to servers list)**.</br>
        [Postman collection]: authorization headers automatically added.</br>
        Credential samples (user - password):
        * test1 - test1password
        * test2 - test2password
        * test3 - test3password
      operationId: login
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'          
      responses:
        200: 
          description: Successful operation
        401: 
          description: Unable to log in with provided credentials

  /tasks/:
    get:
      tags:
        - tasks
      summary: Returns all tasks list
      description: Pagination and filtration by status available
      operationId: get_all_tasks
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/page'
      responses:
        200: 
          description: Successful operation
        401: 
          description: Unathorized
    post:
      tags:
        - tasks
      summary: Creates a new task
      operationId: create_task
      requestBody:
        description: Create a new task
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTask'
      responses:
        201:
          description: Task successfully created.
        400:
          description: Bad request, see response text.
        401:
          description: Unathorized.

  /tasks/own/:
    get:
      tags:
        - tasks
      summary: Returns own tasks list
      description: Pagination and filtration by status available
      operationId: get_own_tasks
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/page'
      responses:
        200: 
          description: Successful operation
        401: 
          description: Unathorized

  /tasks/users/{userId}/:
    get:
      tags:
        - tasks
      summary: Returns tasks for user with id=userId
      operationId: get_user_tasks
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200: 
          description: Successful operation
        401: 
          description: Unathorized
        404: 
          description: User not found

  /tasks/{taskId}/:
    get:
      tags:
        - tasks
      summary: Returns a commets for user profile.
      operationId: task_details
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        200: 
          description: Successful operation.
        401: 
          description: Unathorized.
        404: 
          description: Task not found.
    patch:
      tags:
        - tasks
      summary: Updates task information.
      description: Can be updated only by owner.
      operationId: patch_task
      parameters:
        - $ref: '#/components/parameters/taskId'      
      requestBody:
        description: Unpdate task information.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTask'
      responses:
        200:
          description: Successful operation.
        400:
          description: Bad request, see response text.
        403:
          description: You can modify only own tasks.
        404:
          description: Task not found.
    delete:
      tags:
        - tasks
      summary: Deletes task.
      description: Can be deleted only by owner.
      operationId: delete_task
      parameters:
        - $ref: '#/components/parameters/taskId'      
      responses:
        200:
          description: Successful operation.
        403:
          description: You can delete only own tasks.
        404:
          description: Task not found.

  /tasks/{taskId}/mark-completed/:
    patch:
      tags:
        - tasks
      summary: Marks task as completed.
      description: Can be perform only by owner.
      operationId: mark_completed_task
      parameters:
        - $ref: '#/components/parameters/taskId'      
      responses:
        200:
          description: Successful operation.
        403:
          description: You can modify only own tasks.
        404:
          description: Task not found.


components:

  schemas:

    Registration:
      type: object
      required: [first_name, username, password]
      properties:
        first_name:
          type: string
          description: Users' first name
          maxLength: 150
        username:
          type: string
          description: 150 characters or fewer. Letters, digits and @/./+/-/_ only.
          maxLength: 150
        password:
          type: string
          description: Password (min 6 symbols)
        last_name:
          type: string
          description: (optional) Users' last name
          maxLength: 150      
    
    Login:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    CreateTask:
      title: CreateTask
      type: object
      required: [title]
      properties:
        title:
          type: string
          description: Task title
          maxLength: 64
          example: Find Mankrik's Wife.
        description:
          type: string
          description: Task description
          maxLength: 1024
          example: We battled in a small tauren camp when we were separated--
            she held three of the Bristlebacks off by herself.
        status:
          type: string
          description: Task status
          enum:
            - New
            - In Progress
            - Completed          
          default: New

    UpdateTask:
      title: UpdateTask
      type: object
      properties:
        title:
          type: string
          description: Task title
          maxLength: 64
        description:
          type: string
          description: Task description
          maxLength: 1024
        status:
          type: string
          description: Task status
          enum:
            - New
            - In Progress
            - Completed          

  parameters:

    status:
      name: status
      in: query
      description: Status values that need to be considered for filter
      required: false
      explode: true
      schema:
        type: string
        enum:
          - New
          - In Progress
          - Completed

    page:
      name: page
      in: query
      description: Page number parameter
      required: false
      explode: true
      schema:
        type: integer
        format: int32

    userId:
      name: userId
      in: path
      description: "User id"
      required: true
      schema:
        type: integer
        format: int32
        example: 1 
 
    taskId:
      name: taskId
      in: path
      description: "Task id"
      required: true
      schema:
        type: integer
        format: int32
        example: 1 

  securitySchemes:
    token_auth:
      type: apiKey
      name: Authorization
      in: header
      description: "The value taken from 'access'-value Response (**/login/**) should 
        be prefixed by the string literal 'Bearer', with whitespace separating
         the two strings. Example: <br>
         **<span style='color:red;'>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIxODI3MDAwLCJpYXQiOjE3MjE3NDA2MDAsImp0aSI6IjVkNTRiM2EwODk4ZTRlZmJiM2Y2YTI3OGFhNjIzZWExIiwidXNlcl9pZCI6NTJ9.5Ijp6IH2Ta1uCExj8eWGuMveh632khAJLTk2_QKVhBA</span>**"


security:
- token_auth: []

